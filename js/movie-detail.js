function getMovieIdFromUrl() {
    let searchParams = new URLSearchParams(window.location.search);
    return searchParams.get("movie_id");
}

const movieId = getMovieIdFromUrl();
console.log("Movie ID:", movieId);

function getAllMovie() {
    axios.get('http://localhost:8080/api/v1/movie/playing_now')
        .then(function (response) {
            console.log(response.data);
            let data = response.data.data; // L·∫•y danh s√°ch phim

            let upcomingMovie = document.getElementById('upcoming-movies');

            let html = '';

            if (data && data.length > 0) {
                data.forEach(movie => {
                    html += `
                        <div class="movie-item row">
                                <div class="col-3">
                                    <a href="movie-detail.html?movie_id=${movie.id}">
                                    <img src="${movie.poster || 'default.jpg'}" alt="Poster c·ªßa ${movie.title}" class="movie-item-img img-fluid" />
                                </a>
                                </div>
                                <div class="col-9">
                                    <span class="movie-item-certification">${movie.certification}</span>
                                    <p class="movie-title"><b>${movie.title}</b>
                                    </p>
                                    <p class="movie-genre">${movie.genres ? movie.genres.map(genre => genre.name).join(', ') : 'Kh√¥ng x√°c ƒë·ªãnh'}</p>
                                    <div class="movie-rating">
                                        <span>‚≠ê</span>
                                        <span>${movie.vote_average}</span>
                                    </div>
                                </div>
                            </div>
                            <hr>
                    `;

                });
            } else {
                html = '<p class="text-center text-white">Kh√¥ng c√≥ phim n√†o.</p>';
            }
            upcomingMovie.innerHTML = html;

        })
        .catch(function (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch phim:", error);
        });
}

getAllMovie();

function getMovieDetail() {
    if (!movieId) {
        console.error("Kh√¥ng t√¨m th·∫•y ID phim.");
        return;
    }

    axios.get(`http://localhost:8080/api/v1/movie/getMovie/${movieId}`)
        .then(function (response) {
            console.log("D·ªØ li·ªáu phim:", response.data);

            let data = response.data?.data || response.data; // L·∫•y th√¥ng tin phim

            // L·∫•y ph·∫ßn t·ª≠ DOM
            let rating = document.querySelector('.movie-certification');
            let title = document.querySelector('.movie-title');
            let title_1 = document.querySelector('.movie-title-1');
            let poster = document.querySelector('.description-movie-img');
            let genre = document.querySelector('.movie-genre');
            let trailer = document.querySelector('.btn-trailer');
            let description = document.querySelector('.description-movie-content');
            let duration = document.querySelector('.movie-duration');
            let releaseDate = document.querySelector('.movie-release-date');
            const movieHeader = document.querySelector('.description-movie-header');

            // Change the background image


            if (data) {
                const overlay = document.createElement('div');
                overlay.style.position = 'absolute';
                overlay.style.top = '0';
                overlay.style.left = '0';
                overlay.style.width = '100%';
                overlay.style.height = '100%';
                overlay.style.backgroundImage = `url('${data.backdrop || 'default.jpg'}')`;
                overlay.style.backgroundSize = 'cover';
                overlay.style.backgroundPosition = 'center';
                overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.87)'; // Darken with black color and transparency
                overlay.style.opacity = '0.4'
                overlay.style.zIndex = '-1'; // Ensure the overlay is behind the content

                // Append the overlay to the movieHeader
                movieHeader.style.position = 'relative'; // Ensure the movieHeader is positioned correctly
                movieHeader.appendChild(overlay);
                rating.innerHTML = data.certification || "Ch∆∞a c√≥ ƒë√°nh gi√°";
                title.innerHTML = data.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ";
                title_1.innerHTML = data.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ";
                poster.src = data.poster || 'default.jpg';
                genre.innerHTML = data.genres ? data.genres.map(genre => genre.name).join(', ') : 'Kh√¥ng x√°c ƒë·ªãnh';
                trailer.setAttribute('data-trailer-id', data.trailer || ''); // L∆∞u URL trailer
                // trailer.setAttribute('data-movie-title', data.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ');
                description.innerHTML = data.description || "Kh√¥ng c√≥ m√¥ t·∫£";
                duration.innerHTML = data.duration || "Kh√¥ng r√µ th·ªùi l∆∞·ª£ng";
                releaseDate.innerHTML = data.releaseDate || "Kh√¥ng c√≥ ng√†y ph√°t h√†nh";
            }
        })
        .catch(function (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin phim:", error);
        });
}

// G·ªçi h√†m l·∫•y th√¥ng tin phim
getMovieDetail();


function showListTheater(movieId) {
    axios.get(`http://localhost:8080/api/v1/showtime/getByMovie/${movieId}`)
        .then(function (response) {
            console.log("Danh s√°ch r·∫°p chi·∫øu phim:", response.data);

            let data = response.data.data; // ƒê·∫£m b·∫£o API tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
            let theaterList = document.querySelector('.list-theater-item');

            let html = '';

            if (data && data.length > 0) {
                data.forEach(theater => {
                    let showtimesHtml = '';

                    console.log("S·ªë l∆∞·ª£ng su·∫•t chi·∫øu:", theater.showTime ? theater.showTime.length : 0);

                    if (theater.showTime && theater.showTime.length > 0) {
                        showtimesHtml += ``
                        showtimesHtml = theater.showTime.map(showtime => {
                            let showtimeData = encodeURIComponent(JSON.stringify(showtime)); // Encode d·ªØ li·ªáu
                            return `
                            <div data-bs-toggle="modal" data-bs-target="#ticket" 
                                 onclick="showSeatForShowtime('${showtimeData}')" 
                                 class="time-slot">
                              <span class="highlight">${showtime.start_time}</span> ~ ${showtime.end_time}
                            </div>
                          `;
                        }).join('');
                    } else {
                        showtimesHtml = '<p class="text-center text-muted">Kh√¥ng c√≥ su·∫•t chi·∫øu</p>';
                    }

                    html += `
                        <div class="list-theater-item-main">
                            <div class="row">
                                <div class="theater-item-main-logo col-1">
                                    <img src="/img/logo-rapchieuphim.avif" alt="logo">
                                </div>
                                <div class="theater-item-main-content col-9">
                                    <p style="font-weight: 16px;margin-bottom: 0;">${theater.cinema_name}</p>
                                    <p style="font-size: 12px; color: rgb(169, 169, 169);margin-bottom: 0;">
                                        ${theater.cinema_address} 
                                        ${theater.cinema_address_map ? `<a href="${theater.cinema_address_map}">[B·∫£n ƒë·ªì]</a>` : ''}
                                    </p>
                                </div>
                            </div>
                            <div class="showtime">
                                <div class="schedule">${theater.showTime[0].room.type.replace("TYPE_", "")} ${checkSupport(theater.showTime[0].movie.support)}</div>
                                ${showtimesHtml}
                            </div>
                        </div>
                        <hr>
                    `;
                });
            } else {
                html = '<p class="text-center text-white">Kh√¥ng c√≥ su·∫•t chi·∫øu n√†o chi·∫øu phim n√†y.</p>';
            }

            theaterList.innerHTML = html;

        })
        .catch(function (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch r·∫°p chi·∫øu phim:", error);
        });
}

// G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch r·∫°p
showListTheater(movieId);


// üöÄ C·∫≠p nh·∫≠t hi·ªÉn th·ªã gh·∫ø cho su·∫•t chi·∫øu
function showSeatForShowtime(encodedShowtime) {
    let showTime = JSON.parse(decodeURIComponent(encodedShowtime));
    console.log("Su·∫•t chi·∫øu:", showTime);


    axios.get(`http://localhost:8080/api/v1/seat/allSeatToShowTime?showTimeId=${showTime.id}`)
        .then(function (response) {
            console.log("Danh s√°ch gh·∫ø:", response.data.data);

            let seatData = response.data.data; // L·∫•y danh s√°ch gh·∫ø
            let selectedSeats = [];
            let totalPrice = 0;

            // X√≥a gh·∫ø c≈© tr∆∞·ªõc khi hi·ªÉn th·ªã gh·∫ø m·ªõi
            $('#seat-map').empty();

            const rows = [...new Set(seatData.map(seat => seat.seatNumber.charAt(0)))];

            rows.forEach(row => {
                const rowSeats = seatData.filter(seat => seat.seatNumber.startsWith(row));
                const rowDiv = $('<div class="d-flex justify-content-center"></div>');

                rowSeats.forEach(seat => {
                    let seatClass = 'seat-available';
                    let seatPrice = showTime.price; // Gi√° m·∫∑c ƒë·ªãnh

                    if (seat.seatStatus === 'OCCUPIED') {
                        seatClass = 'seat seat-booked';
                    } else {
                        if (seat.seatType === 'VIP') {
                            seatClass = 'seat-vip';
                            seatPrice += 50000; // C·ªông th√™m 50K
                        } else if (seat.seatType === 'COUPLE') {
                            seatClass = 'seat_couple seat-couple';
                            seatPrice += 100000; // C·ªông th√™m 100K
                        }
                    }

                    const seatDiv = $('<div></div>')
                        .addClass(`seat ${seatClass}`)
                        .text(seat.seatNumber)
                        .attr('id', seat.seatNumber)
                        .data('seatId', seat.id)
                        .data('price', seatPrice); // L∆∞u gi√° ti·ªÅn v√†o data c·ªßa th·∫ª gh·∫ø

                    seatDiv.click(function () {
                        if (!$(this).hasClass('seat-booked')) {
                            $(this).toggleClass('seat-selected');
                            const seatId = $(this).attr('id');
                            const seat_id = $(this).data('seatId');
                            const seatPrice = $(this).data('price');

                            if (selectedSeats.some(s => s.id === seatId)) {
                                selectedSeats = selectedSeats.filter(s => s.id !== seatId);
                            } else {
                                selectedSeats.push({ id: seatId, seatId: seat_id, price: seatPrice });
                            }

                            $('#selected-seats').text(selectedSeats.length ? selectedSeats.map(s => s.id).join(', ') : 'Ch∆∞a ch·ªçn gh·∫ø n√†o');

                            // T√≠nh t·ªïng ti·ªÅn
                            totalPrice = selectedSeats.reduce((sum, seat) => sum + seat.price, 0);
                            $('#total-price').text(totalPrice.toLocaleString('vi-VN') + 'ƒë');
                        }
                    });

                    rowDiv.append(seatDiv);
                });

                $('#seat-map').append(rowDiv);
            });

            //x·ª≠ l√≠ t√™n phim
            document.querySelector('.text-center').innerHTML = `${showTime.movie.title} - ${showTime.start_time} ~ ${showTime.end_time} - ${showTime.show_date} - ${showTime.room.name} - ${showTime.room.type.replace("TYPE_", "")} ${checkSupport(showTime.movie.support)}`

            // X·ª≠ l√Ω mua v√©
            $('#buy-ticket').off('click').on('click', function () {
                if (selectedSeats.length > 0) {
                    showDetailTicket(encodedShowtime, selectedSeats, totalPrice);
                } else {
                    alert('Vui l√≤ng ch·ªçn gh·∫ø tr∆∞·ªõc khi mua v√©.');
                }
            });

        })
        .catch(function (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch gh·∫ø:", error);
        });
};

function checkSupport(support) {
    if(support == "PHUDE") {
        return "Ph·ª• ƒë·ªÅ";
    } else if (support == "SUB") {
        return "Ph·ª• ƒë·ªÅ";
    } else if (support == "LONGTIENG") {
        return "L·ªìng ti·∫øng"
    }
}

//X·ª≠ l√≠ ph·∫ßn ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n

let method_payment = "VNPAY";

document.querySelectorAll('.dropdown-item').forEach(item => {
    item.addEventListener('click', function (e) {
        e.preventDefault();
        let selectedValue = this.getAttribute('data-value');
        let selectedImg = this.querySelector('img').getAttribute('src');
        let selectedText = this.innerText.trim();
        document.getElementById('paymentDropdown').innerHTML = `<img src="${selectedImg}" style="width: 30px; height: 30px; margin-right: 10px;" alt="logo paypal"> ${selectedText}`;
        method_payment = selectedValue;
        console.log("B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:", selectedValue);

    });
});


//x·ª≠ l√≠ ph·∫ßn x√°c nh·∫≠n thanh to√°n

function showDetailTicket(encodedShowtime, selectedSeats, totalPrice) {

    let showTime = JSON.parse(decodeURIComponent(encodedShowtime));
    var bookingModal = new bootstrap.Modal(document.getElementById('booking'));
    bookingModal.show();

    document.getElementById('showtime_id').value = showTime.id;
    let movie_name = document.querySelector('.name-movie');
    let movie_time = document.querySelector('.showtime-time');
    let movie_date = document.querySelector('.showtime-date');
    let theater_title = document.querySelector('.cinema_title');
    let theater_address = document.querySelector('.cinema_address');
    let movie_seat = document.querySelector('.seats');
    let movie_room = document.querySelector('.room-movie');
    let type_movie = document.querySelector('.type-movie');
    let total_price = document.querySelector('.price-seat');
    console.log("t·ªïng ti·ªÅn gh·∫ø : ", totalPrice);

    movie_name.innerHTML = showTime.movieName;
    movie_time.innerHTML = showTime.start_time + " ~ " + showTime.end_time;
    movie_date.innerHTML = showTime.show_date;
    theater_title.innerHTML = showTime.cinema.cinema_name;
    theater_address.innerHTML = showTime.cinema.cinema_address;
    movie_room.innerHTML = showTime.room.name;
    movie_seat.innerHTML = selectedSeats.map(s => s.id).join(', ');
    document.getElementById('seats').value = selectedSeats.map(s => s.seatId).join(',');
    type_movie.innerHTML = showTime.room.format;
    total_price.innerHTML = totalPrice.toLocaleString('vi-VN') + 'ƒë';

    document.querySelector('.price-tt').innerHTML = totalPrice.toLocaleString('vi-VN') + 'ƒë';
    document.querySelector('.total-price').innerHTML = totalPrice.toLocaleString('vi-VN') + 'ƒë';

    

}

function resetDiscount() {
    // L·∫•y instance ƒë√£ t·ªìn t·∫°i thay v√¨ t·∫°o m·ªõi
    var bookingModal = bootstrap.Modal.getInstance(document.getElementById('booking'));
    
    if (bookingModal) {
        bookingModal.hide(); // ƒê√≥ng modal n·∫øu ƒë√£ t·ªìn t·∫°i
    }
}
document.getElementById("closeModalBooking").addEventListener("click", function () {
    let seatInfoModalElement = document.getElementById('booking');
    let seatInfoModalInstance = bootstrap.Modal.getInstance(seatInfoModalElement);
    if (seatInfoModalInstance) {
        seatInfoModalInstance.hide();
        document.getElementById('discount').value = '';
    }
});


function checkDiscount() {
    // L·∫•y m√£ gi·∫£m gi√° t·ª´ √¥ nh·∫≠p
    let discountCode = document.getElementById('discount').value.trim().toUpperCase();
    let originalPriceText = document.querySelector('.price-tt').innerText.replace(/[^\d]/g, ''); // L·∫•y gi√° tr·ªã t·∫°m t√≠nh
    let originalPrice = parseInt(originalPriceText); // Chuy·ªÉn th√†nh s·ªë

    // G·ª≠i y√™u c·∫ßu ki·ªÉm tra m√£ gi·∫£m gi√°
    axios.get(`http://localhost:8080/api/v1/discount/check/${discountCode}`)
        .then(function (response) {
            console.log("Ki·ªÉm tra m√£ gi·∫£m gi√°:", response.data.data);

            let discount = response.data.data;

            let totalPrice = 0;

            if (discount.quantity > 0) {
                if (discount.discountAmount == 0) {
                    totalPrice = originalPrice - discount.discountRate * originalPrice / 100;
                }
                else {
                    totalPrice = originalPrice - discount.discountAmount;
                }
            }

            // T√≠nh t·ªïng ti·ªÅn sau gi·∫£m gi√°
            
            totalPrice = totalPrice > 0 ? totalPrice : 0; // ƒê·∫£m b·∫£o kh√¥ng √¢m

            // C·∫≠p nh·∫≠t giao di·ªán
            document.querySelector('.total-price').innerText = totalPrice.toLocaleString('vi-VN') + ' ƒë';
        })
        .catch(function (error) {
            console.error("L·ªói khi ki·ªÉm tra m√£ gi·∫£m gi√°:", error);
            alert("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ l·ªói x·∫£y ra!");
        });
}


function payment() {
    let showtime_id = document.getElementById('showtime_id').value;
    let seats = document.getElementById('seats').value.split(',');
    let discount = document.getElementById('discount').value.trim().toUpperCase();
    let totalPrice = document.querySelector('.total-price').innerText.replace(/[^\d]/g, ''); // L·∫•y gi√° tr·ªã t·ªïng ti·ªÅn

    // Ki·ªÉm tra d·ªØ li·ªáu
    console.log("ID su·∫•t chi·∫øu:", showtime_id);
    console.log("Gh·∫ø ƒë√£ ch·ªçn:", seats);
    console.log("M√£ gi·∫£m gi√°:", discount);
    console.log("T·ªïng ti·ªÅn:", totalPrice);

    // G·ª≠i y√™u c·∫ßu thanh to√°n
    axios.post(`http://localhost:8080/api/v1/booking/create`, {
        showTimeId: showtime_id,
        seatIds: seats,
        paymentMethod: method_payment,
        discountCode: discount
    })
        .then(function (response) {
            console.log("K·∫øt qu·∫£ thanh to√°n:", response.data.data);
            let orderInfo = response.data.data.bookingCode;
            axios.post(`http://localhost:8080/api/v1/payment/create_payment?amount=${response.data.data.totalPrice}&orderInfo=${encodeURIComponent(orderInfo)}&methodPayment=${method_payment}`)
                .then(function (response) {
                    console.log("K·∫øt qu·∫£ thanh to√°n:", response.data.data);
                    let paymentUrl = response.data.data.url;
                    window.location.href = paymentUrl;
                })
                .catch(function (error) {
                    console.error("L·ªói khi thanh to√°n:", error);
                    alert("Thanh to√°n th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
                });
        })
        .catch(function (error) {
            console.error("L·ªói khi thanh to√°n:", error);
            alert("Thanh to√°n th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
        });

}

document.addEventListener("DOMContentLoaded", function () {

    // Kh·ªüi t·∫°o modal
    const trailerModal = document.getElementById('trailerModal');
    const trailerVideo = document.getElementById('trailerVideo');
    const modal = new bootstrap.Modal(trailerModal);

    // Khi modal m·ªü, x·ª≠ l√Ω URL trailer v√† nh√∫ng video
    trailerModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget; // N√∫t "Xem trailer" ƒë√£ ƒë∆∞·ª£c nh·∫•n
        let trailerUrl = button.getAttribute('data-trailer-id'); // L·∫•y to√†n b·ªô URL trailer
        const movieTitle = button.closest('.container__description_movie').querySelector('.movie-title').textContent;

        console.log("URL trailer:", trailerUrl);
        console.log("Ti√™u ƒë·ªÅ phim:", movieTitle);

        // Ki·ªÉm tra n·∫øu URL l√† YouTube, chuy·ªÉn th√†nh URL embed
        let embedUrl = trailerUrl;
        

        // ƒê·∫∑t URL v√†o iframe
        trailerVideo.setAttribute('src', embedUrl);
        trailerModal.querySelector('.modal-title').textContent = `Trailer: ${movieTitle}`;
    });

    // Khi modal ƒë√≥ng, d·ª´ng video
    trailerModal.addEventListener('hidden.bs.modal', function () {
        trailerVideo.setAttribute('src', ''); // X√≥a src ƒë·ªÉ d·ª´ng video
    });



});
